package receiver;

import org.jtransforms.fft.DoubleFFT_1D;

public class ZF_Equalizer extends edu.mit.streamjit.api.Pipeline<Float,Float> {
	public ZF_Equalizer() {
		this.add(new ZF_Init(),new ZF_Invert(), new ZF_Revert(),new ZF_Estimate());
	}

		
	private static class ZF_Init extends edu.mit.streamjit.api.Filter<Float, Float> {

		public ZF_Init() {
			super(48, 48);
		}

		@Override
		public void work() {
			float[][] tx1=new float[2][12];
			float[][] tx2=new float[2][12];
			
			Float[][] Tx_array=new Float[24][2];
			for (int j = 0; j < 12; j++) {
				tx1[0][j]=pop();
				tx1[1][j]=pop();
			}
			
			for (int j = 0; j < 12; j++) {
				tx2[0][j]=pop();
				tx2[1][j]=pop();
			}		
//			printArray(tx1);		
			
			tx1 = fft(tx1);
			tx2 = fft(tx2);

			for (int i = 0; i < 12; i++) {
				Tx_array[i][0] =tx1[0][i];
				Tx_array[i][1] =tx1[1][i];
				Tx_array[i+12][0] =tx2[0][i];
				Tx_array[i+12][1] =tx2[1][i];		

			}
			
			for (int i = 0; i < 24; i++) {
				push(Tx_array[i][0]); 	
				push(Tx_array[i][1]); 	
			}			
			
		}
	}
	
	private static class ZF_Invert extends edu.mit.streamjit.api.Filter<Float, Float> {

		public ZF_Invert() {
			super(48,32);
		}

		@Override
		public void work() {
			double H_array[][][]=setup();						
			Float[][] Tx_array=new Float[24][2];
			
			for (int i = 0; i < 24; i++) {
				Tx_array[i][0]=pop(); 	
				Tx_array[i][1]=pop(); 	
			}	
			
			for (int i = 2; i < 10; i++) {
				double real=0;
				double img=0;
				for (int j = 0; j <24; j++) {
//					System.out.println(H_array[0][i][j]);
					real+=(H_array[0][i][j]*Tx_array[j][0]);
				}
				for (int j = 0; j <24; j++) {
					real-=(H_array[1][i][j]*Tx_array[j][1]);
				}
								
				for (int j = 0; j <24; j++) {
					img+=(H_array[0][i][j]*Tx_array[j][1]);
				}
				for (int j = 0; j <24; j++) {
					img+=(H_array[1][i][j]*Tx_array[j][0]);
				}
				push((float)real);
				push((float)img);
	
			}
			
			for (int i = 14; i < 22; i++) {
				double real=0;
				double img=0;
				for (int j = 0; j <24; j++) {
//					System.out.println(H_array[0][i][j]);
					real+=(H_array[0][i][j]*Tx_array[j][0]);
				}
				for (int j = 0; j <24; j++) {
					real-=(H_array[1][i][j]*Tx_array[j][1]);
				}
								
				for (int j = 0; j <24; j++) {
					img+=(H_array[0][i][j]*Tx_array[j][1]);
				}
				for (int j = 0; j <24; j++) {
					img+=(H_array[1][i][j]*Tx_array[j][0]);
				}
								
				push((float)real);
				push((float)img);
			}
			
			
		}
	}
	
	private static class ZF_Revert extends edu.mit.streamjit.api.Filter<Float, Float> {

		public ZF_Revert() {
			super(32, 32);
		}

		@Override
		public void work() {
			Float[][] R=new Float[2][16];			
			for (int i = 0; i < 16; i++) {
				R[0][i]=pop();
				R[1][i]=pop();
			}
						
//			printArray(R);
			R=ifft(R);		
//			printArray(R);
			for (int i = 0; i <16; i++) {
				push(R[0][i]);
				push(R[1][i]);
			}
		}
	}
	
	private static class ZF_Estimate extends edu.mit.streamjit.api.Filter<Float, Float> {

		public ZF_Estimate() {
			super(1, 1);
		}

		@Override
		public void work() {
			
			float a=pop();
//			System.out.println(a);
//			System.out.println(a);
			
			int l=(int)Math.floor(a);
			int h=(int)Math.ceil(a);
//			System.out.println(l+" "+h);
			if(l<=-7)	push(-7.0f);
			else if(h>=7)	push(7.0f);
			else{				
				if(Math.abs(l)%2==1)	push((float)l);
				else push((float)h);				
			}
			
		}
	}
	
	
	public static float[][] fft(float[][] tx) {
		double in[] = new double[24];
		DoubleFFT_1D fftDo = new DoubleFFT_1D(12);
		for (int i = 0; i < tx[0].length; ++i) {
			in[2 * i] = tx[0][i];
			in[2 * i + 1] = tx[1][i];

		}

		

		fftDo.complexForward(in);
		int count = 0;
		for (int j = 0; j < 12; ++j) {
			tx[0][count] = (float)in[2 * j];
			tx[1][count] = (float)in[2 * j + 1];
			++count;
		}

		return tx;
	}

	public static Float[][] ifft(Float[][] rx) {
		double in1[] = new double[16];
		double in2[] = new double[16];
		for (int i = 0; i <8; ++i) {
			in1[2 * i] = rx[0][i];
			in1[2 * i + 1] = rx[1][i];
			
			in2[2 * i] = rx[0][i + 8];
			in2[2 * i + 1] = rx[1][i + 8];
		}

		DoubleFFT_1D fftDo = new DoubleFFT_1D(8);

		fftDo.complexInverse(in1, true);
		fftDo.complexInverse(in2, true);
		int count = 0;
		for (int j = 0; j <8; ++j) {
			rx[0][count] = (float)in1[2 * j];
			rx[1][count] = (float)in1[2 * j + 1];
			rx[0][count + 8] = (float)in2[2 * j];
			rx[1][count + 8] = (float)in2[2 * j + 1];
			++count;
		}
		
		return rx;
	}
	
	
	public static double[][][] setup(){
		
		double[][][] H_array=new double[2][24][24];
		double[][] Hreal = {{0.01150709554298112,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.047491704815548555,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,-0.017155290947564062,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.036155073555840564,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,-0.0982139924223997,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0341492939363846,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0},{0.0,0.0,0.0,-0.02632059503436356,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.02843945980122592,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.03820407423751581,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03176308065608837,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,-0.09420825808433189,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.10613037126279204,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,-0.022659789169986642,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.047895313137306786,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.03361592638421061,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.18908797864904E-4,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.035313245309870706,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03134438850588268,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.11465105269977002,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.013195214218541812,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0057833655204114764,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.20776992347578388,-0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.07416325291648568,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02934598198329222},{-0.07195485443905021,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.03448716772944602,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0},{0.0,-0.014432669989650239,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0045663310954241225,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,-0.03008367256952951,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.05336895326802674,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0},{0.0,-0.0,0.0,0.03928708109630089,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.018965763504189756,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,-0.06696036312190277,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03537471867258055,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.15799664077894768,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03677244205707955,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.05669596667723424,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02584788956048295,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.09160076081997331,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.05243113415080003,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.052748924863950004,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.02945291837542481,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.05214635039535669,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.11782838511396539,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.013739690429307842,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.07754018743235636,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.019839613578580592,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0,0.0,0.15056349853475273}};
		double[][] Himg = {{0.05736903942368891,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02464000844016284,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0036498657368069388,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.018170967090119658,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,-0.010687333374551557,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03397192539537382,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,-0.00466871869889952,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.037340415142421764,0.0,0.0,0.0,0.0,0.0,0.0,-0.0,-0.0},{0.0,0.0,0.0,0.0,-0.012780597564988548,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.01924652144507006,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,-0.12169103151995311,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.02343265433656397,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.001978834297666869,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.030682195326399937,0.0,0.0,0.0,-0.0,-0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.050925866823020575,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.04311306601238409,0.0,0.0,-0.0,-0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.012417605583212244,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.023914431540072358,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.019518377020340788,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.056968779205155834,-0.0,-0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.08541070050387094,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.04242111209386305,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.08402309216327597,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2431417533510724},{0.04429729294687415,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.00877252232861528,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,-0.05179325776995363,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0037789477217028185,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0,-0.0},{0.0,0.0,0.06282195330427454,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.006055387732448972,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.003789605891716733,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.06328456440021786,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,-0.057466985626293425,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.053698583352052805,0.0,0.0,0.0,0.0,0.0,-0.0,-0.0},{0.0,0.0,0.0,0.0,0.0,-0.07733217015580005,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.012957149269302377,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,-0.0016487615023298534,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.06212691475472393,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.07064637376377442,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.055410876905503816,0.0,0.0,-0.0,-0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.040426582887033526,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.008092764876288856,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.08370382229107654,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0020476944124278138,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.07048989177800845,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.029751019854799117,-0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.14656291903943952,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0,-0.13720197664640182}};
//		try
//	      {
//	         FileInputStream fileIn = new FileInputStream("params/channel matrices/EPA 5Hz-Low-HZFreal.ser");
//	         ObjectInputStream in = new ObjectInputStream(fileIn);
//	         Hreal = (double[][]) in.readObject();
//	         
//	         in.close();
//	         fileIn.close();
//	      }catch(IOException i)
//	      {
//	         i.printStackTrace();	         
//	      }catch(ClassNotFoundException c)
//	      {
//	         c.printStackTrace();	         
//	      }
//		
//		try
//	      {
//	         FileInputStream fileIn = new FileInputStream("params/channel matrices/EPA 5Hz-Low-HZFimg.ser");
//	         ObjectInputStream in = new ObjectInputStream(fileIn);
//	         Himg = (double[][]) in.readObject();
//	         in.close();
//	         fileIn.close();
//	      }catch(IOException i)
//	      {
//	         i.printStackTrace();	         
//	      }catch(ClassNotFoundException c)
//	      {
//	         c.printStackTrace();	         
//	      }
		
			H_array[0]=Hreal;
			H_array[1]=Himg;
			
//			for (int i = 0; i < 24; i++) {
//				for (int j = 0; j < 24; j++) {
//					System.out.print(Hreal[i][j]+" ");
//				}
//				System.out.println();
//			}
//			System.out.println("######################");
//			for (int i = 0; i <24; i++) {
//				for (int j = 0; j < 24; j++) {
//					System.out.print(Himg[i][j]+" ");
//				}
//				System.out.println();
//			}
//			System.out.println("######################");
			
			return H_array;
	}
	
	private static void printArray(Float[][] d){
		for (int i = 0; i < d[0].length; i++) {
			for (int j = 0; j < 2; j++) {
				System.out.print(d[j][i]+" ");
			}
			System.out.println();
		}
		System.out.println("######################");
	}
	
	private static void printArray(float[][] d){
		for (int i = 0; i < d[0].length; i++) {
			for (int j = 0; j < 2; j++) {
				System.out.print(d[j][i]+" ");
			}
			System.out.println();
		}
		System.out.println("######################");
	}
}
