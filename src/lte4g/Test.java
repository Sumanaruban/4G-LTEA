package lte4g;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.jscience.mathematics.vector.ComplexMatrix;

public class Test {
	public static void main(String[] args) {
		// System.out.println(Math.abs(0)%2==1);
		// DataOutputStream out=null;
		// DataInputStream in=null;
		// try {
		// out = new DataOutputStream(new
		// FileOutputStream("src/transmitter/data.in"));
		// in = new DataInputStream(new
		// FileInputStream("src/receiver/channel_out.out"));
		// } catch (FileNotFoundException e1) {
		// // TODO Auto-generated catch block
		// e1.printStackTrace();
		// }
		// System.out.print("{");
		// for (int i = 0; i < 528; i++) {
		// try {
		// System.out.print(in.readFloat());
		// } catch (IOException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		// if(i!=527)System.out.print(",");
		// }
		// System.out.print("}");
		double[][] H = null;
		try {
			FileInputStream fileIn = new FileInputStream("EPA 5Hz-Low-Hinvimg.ser");
			ObjectInputStream in = new ObjectInputStream(fileIn);
			H = (double[][]) in.readObject();
			in.close();
			fileIn.close();
		} catch (IOException i) {

			i.printStackTrace();
		} catch (ClassNotFoundException c) {
			c.printStackTrace();
		}
		System.out.print("{");
		for (int i = 0; i < 24; i++) {
			System.out.print("{");
			for (int j = 0; j < H[0].length; j++) {
				System.out.print(H[i][j]);
				if (j != H[0].length - 1)
					System.out.print(",");
				else
					;
			}
			System.out.print("}");
			if (i != 23)
				System.out.print(",");
		}
		System.out.print("}");
		// double Eb_No = 10;
		// double lc = (20.0 / 33.0) * Math.pow(10, 0.1 * Eb_No);
		// double sigma = Math.sqrt(3.5 / Math.pow(10, 0.1 * Eb_No));
		// double[][] Hreal
		// ={{-5.0913138923393575,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.8945118402375964,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,-2.056805940293591,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.426283313540226,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,-6.337029507853405,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2003277030587425,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,-16.380752056451627,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.534411157571569,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,12.773719252152635,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-8.480480553760296,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,-1.671822328571554,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.997824078833655,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,-6.777190862208266,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.367198742633487,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,-7.624122560701824,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.843066276169108,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.778660642027814,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.185599361632505,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-14.545146601279622,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.8024116983170724,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-6.702552602190988,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,11.122849681766873,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,12.341213486341122,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.4173496608927003},{16.18837675005905,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-3.1415889474306793,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,20.94870134487784,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.1848517657184985,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,-0.08855559281520886,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-13.007129214016196,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,-2.7438412707842224,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.2246374341520712,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,7.761998919437512,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.130321966789772,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,9.747330200809047,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.576981929904961,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,17.459309758649002,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.952565791748154,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.425653223298708,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-6.612059186359272,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.263630346784373,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-9.46027640650577,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.185905715091557,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.218193092973099,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.8382294636894265,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.405141956468746,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.9700208711897504,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.493272027482042}};
		// double[][] Himg
		// ={{-4.559692313016272,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-8.41727114852717,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,-1.611268052640532,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,17.279293402308426,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,4.049888583322141,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-6.37558114024194,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,11.642600298517829,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.5478807518084805,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,-7.329831686317631,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6580378745005215,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,-1.3860360410096226,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.8215549826970237,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,19.66459452677597,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.542818438087917,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.3674811926796,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.099302511206559,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.329046525544578,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.545383825116527,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6103932792513049,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-6.9953921775635655,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.407580208575208,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.38568372880621,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-8.363582690864913,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-17.919120945087915},{-1.143971088520229,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.789875950625376,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,-11.08538387588484,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.045064048265184,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,-9.752417847702194,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.708103749765038,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,-11.688661410436467,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-8.038822037091233,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,18.659294548258618,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.3286368871870646,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,-0.995153453163327,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.175456086132591,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,-1.6010637251533018,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0470890273695534,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,12.169124692921628,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.382780303717827,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-10.424847269106788,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0864833150831386,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-10.49532591289673,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.062575477624647,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.810160250602112,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.872260289158897,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-10.408909216441181,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-6.861970089789047}};
		//
		// Complex H_array[][] = new Complex[24][24];
		// for (int i = 0; i < 24; i++) {
		// for (int j = 0; j < 24; j++) {
		// H_array[i][j] = Complex.valueOf(Hreal[i][j], Himg[i][j]);
		// }
		// }
		// ComplexMatrix H = ComplexMatrix.valueOf(H_array);
		//
		// Complex[][] H_temp=new Complex[24][24];
		// for (int j = 0; j < 24; j++) {
		// for (int k = 0; k < 24; k++) {
		// H_temp[j][k]= Complex.valueOf(H.get(j, k).getReal(), (-1)*H.get(j,
		// k).getImaginary()); //(i, j)=Complex ;// H.get(i, j).getImaginary();
		// }
		// }
		// ComplexMatrix Hhat=ComplexMatrix.valueOf(H_temp);
		// Hhat=Hhat.transpose();
		//
		// ///////////////////////////////////////////////////////////
		// Complex Pd_array[][] = new Complex[24][24];
		//
		// for (int i = 0; i < 24; i++) {
		//
		// for (int j = 0; j < 24; j++) {
		// if(i==j){
		// Pd_array[i][i] = Complex.valueOf(42.0, 0.0);
		// if (i == 0 || i == 1 || i == 10 || i == 11 || i == 12
		// || i == 13 || i == 22 || i == 23) {
		// Pd_array[i][j] = Complex.valueOf(0.0, 0.0);
		// }
		// }else{
		// Pd_array[i][j] = Complex.valueOf(0.0, 0.0);
		//
		// }
		// }
		// }
		// ComplexMatrix Pd = ComplexMatrix.valueOf(Pd_array);
		//
		//
		// Complex sigma_mat_array[][] = new Complex[24][24];
		// for (int i = 0; i < 24; i++) {
		//
		// for (int j = 0; j < 24; j++) {
		// if(i==j){
		// sigma_mat_array[i][i] = Complex.valueOf(sigma * sigma, 0.0);
		//
		// }else{
		// sigma_mat_array[i][j] = Complex.valueOf(0.0, 0.0);
		//
		// }
		// }
		// }
		// ComplexMatrix sigma_mat=ComplexMatrix.valueOf(sigma_mat_array);
		// //////////////////////////////////////////////////////////////
		// Complex C_her_array[][] = new Complex[24][24];
		// ComplexMatrix C;
		// ComplexMatrix C_her;
		// C=Pd.times(H).times(Hhat).plus(sigma_mat).inverse().times(Pd).times(H);
		// //System.out.println(C);
		// for (int j = 0; j < 24; j++) {
		// for (int k = 0; k < 24; k++) {
		// C_her_array[j][k]= Complex.valueOf(C.get(j, k).getReal(),
		// (-1)*C.get(j, k).getImaginary()); //(i, j)=Complex ;// H.get(i,
		// j).getImaginary();
		// }
		// }
		// C_her=ComplexMatrix.valueOf(C_her_array);
		// C_her=C_her.transpose();
		// save(C_her,"EPA 5Hz-Low-HLMMSE");

	}

	private static void save(ComplexMatrix A, String s) {
		double[][] rel = new double[A.getNumberOfRows()][A.getNumberOfColumns()];
		double[][] img = new double[A.getNumberOfRows()][A.getNumberOfColumns()];
		for (int i = 0; i < A.getNumberOfRows(); i++) {
			for (int j = 0; j < A.getNumberOfColumns(); j++) {
				rel[i][j] = A.get(i, j).getReal();
				img[i][j] = A.get(i, j).getImaginary();
			}
		}

		try {
			FileOutputStream fileOut1 = new FileOutputStream(s + "real.ser");
			FileOutputStream fileOut2 = new FileOutputStream(s + "img.ser");
			ObjectOutputStream out1 = new ObjectOutputStream(fileOut1);
			out1.writeObject(rel);
			ObjectOutputStream out2 = new ObjectOutputStream(fileOut2);
			out2.writeObject(img);
			out1.close();
			out2.close();
			fileOut1.close();
			fileOut2.close();
		} catch (IOException i) {
			i.printStackTrace();
		}

	}

}
